// Generated by gencpp from file ros_carla_sumo_integration/SPaT.msg
// DO NOT EDIT!


#ifndef ROS_CARLA_SUMO_INTEGRATION_MESSAGE_SPAT_H
#define ROS_CARLA_SUMO_INTEGRATION_MESSAGE_SPAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_carla_sumo_integration
{
template <class ContainerAllocator>
struct SPaT_
{
  typedef SPaT_<ContainerAllocator> Type;

  SPaT_()
    : header()
    , tl_state(0)
    , s(0.0)
    , time_r(0.0)
    , time_y(0.0)
    , time_g(0.0)
    , intersection_id(0)
    , obstacle_free(false)
    , signal_phase(0)
    , signal_timing(0.0)
    , stop_bar_distance(0.0)  {
    }
  SPaT_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tl_state(0)
    , s(0.0)
    , time_r(0.0)
    , time_y(0.0)
    , time_g(0.0)
    , intersection_id(0)
    , obstacle_free(false)
    , signal_phase(0)
    , signal_timing(0.0)
    , stop_bar_distance(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _tl_state_type;
  _tl_state_type tl_state;

   typedef float _s_type;
  _s_type s;

   typedef float _time_r_type;
  _time_r_type time_r;

   typedef float _time_y_type;
  _time_y_type time_y;

   typedef float _time_g_type;
  _time_g_type time_g;

   typedef int64_t _intersection_id_type;
  _intersection_id_type intersection_id;

   typedef uint8_t _obstacle_free_type;
  _obstacle_free_type obstacle_free;

   typedef int64_t _signal_phase_type;
  _signal_phase_type signal_phase;

   typedef double _signal_timing_type;
  _signal_timing_type signal_timing;

   typedef double _stop_bar_distance_type;
  _stop_bar_distance_type stop_bar_distance;





  typedef boost::shared_ptr< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> const> ConstPtr;

}; // struct SPaT_

typedef ::ros_carla_sumo_integration::SPaT_<std::allocator<void> > SPaT;

typedef boost::shared_ptr< ::ros_carla_sumo_integration::SPaT > SPaTPtr;
typedef boost::shared_ptr< ::ros_carla_sumo_integration::SPaT const> SPaTConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_carla_sumo_integration::SPaT_<ContainerAllocator1> & lhs, const ::ros_carla_sumo_integration::SPaT_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tl_state == rhs.tl_state &&
    lhs.s == rhs.s &&
    lhs.time_r == rhs.time_r &&
    lhs.time_y == rhs.time_y &&
    lhs.time_g == rhs.time_g &&
    lhs.intersection_id == rhs.intersection_id &&
    lhs.obstacle_free == rhs.obstacle_free &&
    lhs.signal_phase == rhs.signal_phase &&
    lhs.signal_timing == rhs.signal_timing &&
    lhs.stop_bar_distance == rhs.stop_bar_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_carla_sumo_integration::SPaT_<ContainerAllocator1> & lhs, const ::ros_carla_sumo_integration::SPaT_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_carla_sumo_integration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a13bd7f4a042e03e0c090f45d0c6c44";
  }

  static const char* value(const ::ros_carla_sumo_integration::SPaT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a13bd7f4a042e03ULL;
  static const uint64_t static_value2 = 0xe0c090f45d0c6c44ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_carla_sumo_integration/SPaT";
  }

  static const char* value(const ::ros_carla_sumo_integration::SPaT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int16 tl_state        # green:2, yellow:1, red:0 \n"
"float32 s             # location s (m)\n"
"\n"
"float32 time_r        # period of red (s)\n"
"float32 time_y        # period of red (s)\n"
"float32 time_g        # period of red (s)\n"
"\n"
"# Jacopo's cohda msg\n"
"int64 intersection_id\n"
"bool obstacle_free\n"
"int64 signal_phase\n"
"float64 signal_timing\n"
"float64 stop_bar_distance\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_carla_sumo_integration::SPaT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tl_state);
      stream.next(m.s);
      stream.next(m.time_r);
      stream.next(m.time_y);
      stream.next(m.time_g);
      stream.next(m.intersection_id);
      stream.next(m.obstacle_free);
      stream.next(m.signal_phase);
      stream.next(m.signal_timing);
      stream.next(m.stop_bar_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SPaT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_carla_sumo_integration::SPaT_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tl_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.tl_state);
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
    s << indent << "time_r: ";
    Printer<float>::stream(s, indent + "  ", v.time_r);
    s << indent << "time_y: ";
    Printer<float>::stream(s, indent + "  ", v.time_y);
    s << indent << "time_g: ";
    Printer<float>::stream(s, indent + "  ", v.time_g);
    s << indent << "intersection_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.intersection_id);
    s << indent << "obstacle_free: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_free);
    s << indent << "signal_phase: ";
    Printer<int64_t>::stream(s, indent + "  ", v.signal_phase);
    s << indent << "signal_timing: ";
    Printer<double>::stream(s, indent + "  ", v.signal_timing);
    s << indent << "stop_bar_distance: ";
    Printer<double>::stream(s, indent + "  ", v.stop_bar_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CARLA_SUMO_INTEGRATION_MESSAGE_SPAT_H
