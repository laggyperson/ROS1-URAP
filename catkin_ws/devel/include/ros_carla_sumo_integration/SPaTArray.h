// Generated by gencpp from file ros_carla_sumo_integration/SPaTArray.msg
// DO NOT EDIT!


#ifndef ROS_CARLA_SUMO_INTEGRATION_MESSAGE_SPATARRAY_H
#define ROS_CARLA_SUMO_INTEGRATION_MESSAGE_SPATARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_carla_sumo_integration/SPaT.h>

namespace ros_carla_sumo_integration
{
template <class ContainerAllocator>
struct SPaTArray_
{
  typedef SPaTArray_<ContainerAllocator> Type;

  SPaTArray_()
    : header()
    , spats()  {
    }
  SPaTArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , spats(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >::other >  _spats_type;
  _spats_type spats;





  typedef boost::shared_ptr< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> const> ConstPtr;

}; // struct SPaTArray_

typedef ::ros_carla_sumo_integration::SPaTArray_<std::allocator<void> > SPaTArray;

typedef boost::shared_ptr< ::ros_carla_sumo_integration::SPaTArray > SPaTArrayPtr;
typedef boost::shared_ptr< ::ros_carla_sumo_integration::SPaTArray const> SPaTArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator1> & lhs, const ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.spats == rhs.spats;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator1> & lhs, const ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_carla_sumo_integration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c20326c1787561babdd88b0bf497cc65";
  }

  static const char* value(const ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc20326c1787561baULL;
  static const uint64_t static_value2 = 0xbdd88b0bf497cc65ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_carla_sumo_integration/SPaTArray";
  }

  static const char* value(const ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"ros_carla_sumo_integration/SPaT[] spats\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_carla_sumo_integration/SPaT\n"
"Header header\n"
"\n"
"int16 tl_state        # green:2, yellow:1, red:0 \n"
"float32 s             # location s (m)\n"
"\n"
"float32 time_r        # period of red (s)\n"
"float32 time_y        # period of red (s)\n"
"float32 time_g        # period of red (s)\n"
"\n"
"# Jacopo's cohda msg\n"
"int64 intersection_id\n"
"bool obstacle_free\n"
"int64 signal_phase\n"
"float64 signal_timing\n"
"float64 stop_bar_distance\n"
;
  }

  static const char* value(const ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.spats);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SPaTArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_carla_sumo_integration::SPaTArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "spats[]" << std::endl;
    for (size_t i = 0; i < v.spats.size(); ++i)
    {
      s << indent << "  spats[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_carla_sumo_integration::SPaT_<ContainerAllocator> >::stream(s, indent + "    ", v.spats[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CARLA_SUMO_INTEGRATION_MESSAGE_SPATARRAY_H
