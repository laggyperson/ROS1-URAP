// Generated by gencpp from file ros_carla_sumo_integration/NpcState.msg
// DO NOT EDIT!


#ifndef ROS_CARLA_SUMO_INTEGRATION_MESSAGE_NPCSTATE_H
#define ROS_CARLA_SUMO_INTEGRATION_MESSAGE_NPCSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace ros_carla_sumo_integration
{
template <class ContainerAllocator>
struct NpcState_
{
  typedef NpcState_<ContainerAllocator> Type;

  NpcState_()
    : header()
    , loc()
    , rot()
    , vel()
    , ang_vel()  {
    }
  NpcState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , loc(_alloc)
    , rot(_alloc)
    , vel(_alloc)
    , ang_vel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _loc_type;
  _loc_type loc;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rot_type;
  _rot_type rot;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_type;
  _vel_type vel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ang_vel_type;
  _ang_vel_type ang_vel;





  typedef boost::shared_ptr< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> const> ConstPtr;

}; // struct NpcState_

typedef ::ros_carla_sumo_integration::NpcState_<std::allocator<void> > NpcState;

typedef boost::shared_ptr< ::ros_carla_sumo_integration::NpcState > NpcStatePtr;
typedef boost::shared_ptr< ::ros_carla_sumo_integration::NpcState const> NpcStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_carla_sumo_integration::NpcState_<ContainerAllocator1> & lhs, const ::ros_carla_sumo_integration::NpcState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.loc == rhs.loc &&
    lhs.rot == rhs.rot &&
    lhs.vel == rhs.vel &&
    lhs.ang_vel == rhs.ang_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_carla_sumo_integration::NpcState_<ContainerAllocator1> & lhs, const ::ros_carla_sumo_integration::NpcState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_carla_sumo_integration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "19ecffc728299f14548932a1c167576b";
  }

  static const char* value(const ::ros_carla_sumo_integration::NpcState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x19ecffc728299f14ULL;
  static const uint64_t static_value2 = 0x548932a1c167576bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_carla_sumo_integration/NpcState";
  }

  static const char* value(const ::ros_carla_sumo_integration::NpcState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"geometry_msgs/Vector3 loc   # loc.x (m)\n"
"geometry_msgs/Vector3 rot   # rot.x = rotation.roll (deg)\n"
"geometry_msgs/Vector3 vel   # vel.x (m/s)\n"
"geometry_msgs/Vector3 ang_vel   # ang_vel.x (deg/s)\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ros_carla_sumo_integration::NpcState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.loc);
      stream.next(m.rot);
      stream.next(m.vel);
      stream.next(m.ang_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NpcState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_carla_sumo_integration::NpcState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "loc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.loc);
    s << indent << "rot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rot);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
    s << indent << "ang_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ang_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CARLA_SUMO_INTEGRATION_MESSAGE_NPCSTATE_H
