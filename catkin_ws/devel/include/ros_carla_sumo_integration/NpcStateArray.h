// Generated by gencpp from file ros_carla_sumo_integration/NpcStateArray.msg
// DO NOT EDIT!


#ifndef ROS_CARLA_SUMO_INTEGRATION_MESSAGE_NPCSTATEARRAY_H
#define ROS_CARLA_SUMO_INTEGRATION_MESSAGE_NPCSTATEARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_carla_sumo_integration/NpcState.h>

namespace ros_carla_sumo_integration
{
template <class ContainerAllocator>
struct NpcStateArray_
{
  typedef NpcStateArray_<ContainerAllocator> Type;

  NpcStateArray_()
    : header()
    , npc_states()  {
    }
  NpcStateArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , npc_states(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >::other >  _npc_states_type;
  _npc_states_type npc_states;





  typedef boost::shared_ptr< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> const> ConstPtr;

}; // struct NpcStateArray_

typedef ::ros_carla_sumo_integration::NpcStateArray_<std::allocator<void> > NpcStateArray;

typedef boost::shared_ptr< ::ros_carla_sumo_integration::NpcStateArray > NpcStateArrayPtr;
typedef boost::shared_ptr< ::ros_carla_sumo_integration::NpcStateArray const> NpcStateArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator1> & lhs, const ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.npc_states == rhs.npc_states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator1> & lhs, const ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_carla_sumo_integration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "753f31c416b6057fc1aecabd83a43635";
  }

  static const char* value(const ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x753f31c416b6057fULL;
  static const uint64_t static_value2 = 0xc1aecabd83a43635ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_carla_sumo_integration/NpcStateArray";
  }

  static const char* value(const ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"ros_carla_sumo_integration/NpcState[] npc_states\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_carla_sumo_integration/NpcState\n"
"std_msgs/Header header\n"
"\n"
"geometry_msgs/Vector3 loc   # loc.x (m)\n"
"geometry_msgs/Vector3 rot   # rot.x = rotation.roll (deg)\n"
"geometry_msgs/Vector3 vel   # vel.x (m/s)\n"
"geometry_msgs/Vector3 ang_vel   # ang_vel.x (deg/s)\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.npc_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NpcStateArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_carla_sumo_integration::NpcStateArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "npc_states[]" << std::endl;
    for (size_t i = 0; i < v.npc_states.size(); ++i)
    {
      s << indent << "  npc_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_carla_sumo_integration::NpcState_<ContainerAllocator> >::stream(s, indent + "    ", v.npc_states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CARLA_SUMO_INTEGRATION_MESSAGE_NPCSTATEARRAY_H
